// ============================================================================
// File: common.fbs
// Namespace: fbs.cuda.ipc.api
// ---------------------------------------------------------------------------
// Common FlatBuffers definitions shared across CUDA IPC requests and responses.
// ============================================================================

namespace fbs.cuda.ipc.api;

// ---------------------------------------------------------------------------
// UUID Representation (Struct)
// 128-bit unique identifier
// ---------------------------------------------------------------------------
struct UUID {
  msb: uint64;
  lsb: uint64;
}

// ---------------------------------------------------------------------------
// CUDA IPC Handle [cudaIpcMemHandle_t] Representation (FlatBuffers)
// 64-byte binary handle used for CUDA inter-process communication
// ---------------------------------------------------------------------------
struct CudaIPCHandle {
  value: [ubyte:64];  // 64-byte binary handle
}

// ---------------------------------------------------------------------------
// Expiration Options (Structs)
// ---------------------------------------------------------------------------
// expire gpu buffer when access counter is reached (includes CreateGPUBuffer)
struct AccessCountOption {
  aceess_count: uint64;
}

// expire gpu buffer based on creation timestamp has reached ttl
struct TtlCreationOption {
  ttl: uint64; // seconds
}

// expire buffer based on last activity timestamp has reached ttl
struct TtlLastActivityOption {
  ttl: uint64; // seconds
}

// ---------------------------------------------------------------------------
// Union for expiration strategy
// ---------------------------------------------------------------------------
union ExpirationOption {
  AccessCountOption,
  TtlCreationOption,
  TtlLastActivityOption
}
